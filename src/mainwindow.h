#ifndef MAINWINDOW_H
#define MAINWINDOW_H

// Qt includes
#include <QMainWindow>
#include <QtSql>

// Project includes
#include "src/commonparameters.h"


using namespace  std;

class Employee{
public:

    // Attributes

    /*!
     * \brief id id of the employee
     */
    int id;

    /*!
     * \brief name name for this employee
     */
    QString name;

    /*!
     * \brief supervisor id of the supervisor
     */
    int supervisor;

    /*!
     * \brief level Number of known upline supervisors.
     */
    int level;

    /*!
     * \brief nsup Number of known immediate subordinates.
     */
    int nsup;

    /*!
     * \brief ntsup Total number of known subordinates (both direct and indirect).
     */
    int ntsup;

    /*!
     * \brief depth Number of levels of known subordinates below employee.
     */
    int depth;

    // Methods

    /*!
     * \brief Employee public constructor
     */
    Employee() : id(0), name(""), supervisor(0), level(0), nsup(0), ntsup(0), depth(0){}

    /*!
     * \brief toString returns a string containing the information of the class
     * \return
     */
    QString toString(){

        QString str = name + "(" + QString::number(id) + ")" ;
        str += " Level=" + QString::number(level)+ ";";
        str += " NSUP=" + QString::number(nsup)+ ";";
        str += " NTSUP=" + QString::number(ntsup)+ ";";
        str += " Depth=" + QString::number(depth)+ ";";


        return str;
        //return name + "(" + QString::number(id) + ")" + ;

    }

};


class TreeNode{
public:
    TreeNode* parent;
    Employee node;
    vector<TreeNode> successors;

    TreeNode(){ parent = NULL; }
    TreeNode (Employee _node, TreeNode* _parent)
    : node(_node),parent(_parent) {
    }

    void set(Employee node){
        this->node = node;
    }

    Employee get(){
        return node;
    }

    vector<TreeNode> succ() {
        return successors;
    }
    void addChild(TreeNode treeNode) {
        successors.push_back(treeNode);
    }


};



namespace Ui {
class MainWindow;
}

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:

    // ----------------------
    // ATTRIBUTES
    // ----------------------

    /*!
     * \brief level holds the level calculation
     */
    int level;

    /*!
     * \brief ntsup holds the total number of subordinates
     */
    int ntsup;

    /*!
     * \brief depth holds the depth
     */
    int depth;

    /*!
     * \brief treeNode_list Array to store all the nodes in the tree
     */
    QList<TreeNode*> treeNode_list;

    // ----------------------
    // FUNCTIONS
    // ----------------------

    /*!
     * \brief MainWindow Public constructor/Destructor
     * \param parent
     */
    explicit MainWindow(QWidget *parent = 0);
    ~MainWindow();


    /*!
     * Writes a line to the visual console
     */
    void consoleWrite(const QString &line);

    /*!
     * This function is called after the constructor so that the logs are displayed
     * \return the
     */
    void initialize();

    /*!
     * \brief loadHierarchy loads the hierarchy from the SQL
     */
    void loadHierarchy();

    /*!
     * \brief loadChildren generates the tree structure
     * \param treeNode
     */
    void loadChildren(TreeNode& treeNode, QList<Employee> employee_list);


    /*!
     * \brief getLevel gets the level for the specified TreeNode
     * \param treeNode
     * \return
     */
    int getLevel(TreeNode* treeNode);

    /*!
     * \brief getNSUP Number of known immediate subordinates.
     * \param treeNode
     * \return
     */
    int getNSUP(TreeNode* treeNode);

    /*!
     * \brief getNTSUP gets number of total subordinates
     * \param treeNode
     * \return
     */
    int getNTSUP(TreeNode* treeNode);

    /*!
     * \brief getDepth gets the number of subordinates for employees
     * \param treeNode
     * \return
     */
    int getDepth(TreeNode* treeNode);


    /*!
     * \brief calculateParameters calculates Leve, NSUP, NTSUP and Depth
     * \param treeNode
     * \return
     */
    void calculateParameters(TreeNode* treeNode);

    /*!
     * \brief commitResults commits the results of the analysis
     * \param treeNode
     */
    void commitResults(TreeNode *treeNode);




private:
    /*!
     * \brief ui pointer to the User Interface generated by QtDesigner
     */
    Ui::MainWindow *ui;

signals:
    /*!
     * \brief consoleWriteSignal Used for writing into the GUI console. There is a threading issue here
     * \param line
     */
    void consoleWriteSignal(QString line);

    /*!
     * \brief quit terminates the current application
     */
    void quit();
private slots:
    void on_generateTablesBtn_clicked();
    void on_performAnalysisBtn_clicked();

};

#endif // MAINWINDOW_H
